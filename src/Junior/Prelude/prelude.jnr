-- Junior Prelude 

val const :: a -> b -> a
let const x y = x

val id :: a -> a
let id x = x

val fst :: (a, b) -> a
let fst (x, y) = x

val snd :: (a, b) -> b
let snd (x, y) = y

val applyPair :: (a -> b) -> (a -> c) -> a -> (b, c)
let applyPair f g x = (f x , g x)

val flip :: (a -> b -> c) -> b -> a -> c
let flip f x y = f y x

val (.) :: (b -> c) -> (a -> b) -> a -> c
let (.) f g = \x -> f (g x)

val min :: Ord a => a -> a -> a
let min x y = if x > y then y else x

val max :: Ord a => a -> a -> a
let max x y = if x > y then x else y

val maybeToList :: Maybe a -> List a
let maybeToList = foldr (:) [] 

val listToMaybe :: List a -> Maybe a
let listToMaybe = foldr (const . Just) Nothing

val foldr1 :: Foldable t => (a -> a -> a) -> t a -> a
let foldr1 f xs = 
   let mf x m = if (isJust m) then Just(f x (fromJust m)) else Just x in
   fromMaybeLazy (error "foldr1: empty structure") (foldr mf Nothing xs)  

val (++) :: Foldable a => a b -> List b -> List b
let (++) xs ys = foldr (:) ys xs 

val sum :: (Foldable t, Num a) => t a -> a
let sum = foldr (+) 0

val product :: (Foldable t, Num a) => t a -> a
let product = foldr (*) 1

val flatten :: Monad m => m (m a) -> m a
let flatten xs = (>>=) xs id  

val sequenceA :: (Applicative f, Traversable t) => t (f a) -> f (t a)
let sequenceA = traverse id

val liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d
let liftA3 f m n o = (pure f) <*> m <*> n <*> o

val (>=>) :: Monad m => (a -> m b) -> (b -> m c) -> (a -> m c)
let (>=>) f g = \x -> f x >>= g

val (<$>) :: Functor f => (a -> b) -> f a -> f b
let (<$>) = fmap  

val foldKliesli :: (Foldable t, Monad m) => t (a -> m a) -> a -> m a
let foldKliesli = foldr1 (>=>)

-- Value Level Fix Point

val fix :: ((a -> b) -> a -> b) -> a -> b
let fix f x = f (fix f) x

-- Type Level Fix Point

data Fix f = In (f (Fix f))

val out :: Fix f -> f (Fix f)
let out x = match x with | In f -> f

-- Begin Recursion Schemes
  
val ana :: Functor f => (a -> f a) -> (a -> Fix f) -> a -> Fix f
let ana psi f = In . fmap f . psi

val cata :: Functor f => (f a -> a) -> (Fix f -> a) -> Fix f -> a
let cata psi f = psi . fmap f . out

val anaRec :: Functor f => (a -> f a) -> a -> Fix f
let anaRec psi = fix (ana psi)
 
val cataRec :: Functor f => (f a -> a) -> Fix f -> a
let cataRec psi = fix (cata psi)

val hylo :: Functor f => (f a -> a) -> (c -> f c) -> (c -> a) -> c -> a
let hylo psi phi f = psi . fmap f . phi

val hyloRec :: Functor f => (f a -> a) -> (c -> f c) -> c -> a
let hyloRec psi phi = fix (hylo psi phi)

val para :: Functor f => (f (Fix f , a) -> a) -> (Fix f -> a) -> Fix f -> a
let para alg f = alg . fmap (applyPair id f) . out
  
let paraRec psi = fix (para psi)

-- End Recursion Schemes

val matchFn :: List ((a -> Bool, a -> b)) -> a -> b
let matchFn xs x = 
  if (null xs) then error "Pattern match failure" ()
  else let (f, g) = head xs in
  if (f x) then g x else matchFn (tail xs) x

val groupBy :: (a -> a -> Bool) -> List a -> List (List a)
let groupBy f xs = 
  let step x yss =
  if (null yss) then [x]:yss else
  let (ys, yss') = (head yss, tail yss) in
  let (y, ys') = (head ys, tail ys) in
  if f x y then (x:y:ys'):yss' 
  else [x]:yss in
  foldr step [] xs

let partitionBy p xs = 
  let select x (ts, fs) = 
    if p x then (x : ts, fs) 
           else (ts, x : fs) in
  foldr select ([],[]) xs

val sortBy :: (a -> a -> Bool) -> List a -> List a
let sortBy p xs =
    if (null xs) then xs else  
    let (pivot, rest) = (head xs, tail xs) in
    let (lessThan, greaterThan) = partitionBy (\x -> p x pivot) rest in
    (sortBy p lessThan) <> [pivot] <> (sortBy p greaterThan)

val zipWith :: (a -> b -> c) -> List a -> List b -> List c
let zipWith f xs ys =
  let go xs ys = 
    if null xs then []
    else if null ys then []
    else let (x, xs') = (head xs, tail xs) in
         let (y, ys') = (head ys, tail ys) in
         f x y : go xs' ys' in
  go xs ys

val zipWith3 :: (a -> b -> c -> d) -> List a -> List b -> List c -> List d
let zipWith3 f xs ys zs =
  let go xs ys zs = 
    if null xs then []
    else if null ys then []
    else if null zs then [] 
    else let (x, xs') = (head xs, tail xs) in
         let (y, ys') = (head ys, tail ys) in
         let (z, zs') = (head zs, tail zs) in
         f x y z : go xs' ys' zs' in
  go xs ys zs

val zipWithM :: (Applicative m) => (a -> b -> m c) -> List a -> List b -> m (List c)
let zipWithM f xs ys = sequenceA (zipWith f xs ys)

val replicate :: Int -> a -> List a 
let replicate n x = range (\v -> x) 1 n

val liftA2 :: (a -> b -> c) -> f a -> f b -> f c
let liftA2 f x = (<*>) (fmap f x)

val replicateM :: (Applicative m) => Int -> m a -> m (List a)
let replicateM cnt0 f =
  let loop cnt = 
    if cnt <= 0 then pure []
    else liftA2 (:) f (loop (cnt - 1)) in
  loop cnt0

val zip :: List a -> List b -> List (a, b)
let zip = zipWith (\x y -> (x, y))

val unzip :: List (a, b) -> (List a, List b)
let unzip = foldr (\(x, y) (xs, ys) -> (x:xs, y:ys)) ([], [])

val reverse :: List a -> List a
let reverse l = 
  let rev xs a = 
    if null xs then a
    else let (x, xs') = (head xs, tail xs) in
         rev xs' (x:a) in
  rev l []

val uncurry :: (a -> b -> c) -> ((a, b) -> c)
let uncurry f p =  f (fst p) (snd p)

val transpose :: List (List a) -> List (List a)
let transpose xss = 
  if null xss then [] else 
  let (xs, xss') = (head xss, tail xss) in
  if null xs then transpose xss' else
  let (hds, tls) = unzip (xss' >>= (\xs -> if null xs then [] 
                                           else [(head xs, tail xs)])) in
  let combine y h ys t = (y:h) : transpose (ys:t) in
  let (x, xs') = (head xs, tail xs) in
  combine x hds xs' tls

val scanl :: (b -> a -> b) -> b -> List a -> List b
let scanl f q ls = q : (if null ls then []
                        else scanl f (f q (head ls)) (tail ls))
