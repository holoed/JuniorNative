let foldl f v xs =
  if (null xs) then v
  else foldl f (f v (hd xs)) (tl xs)

let foldr f v xs = 
  if (null xs) then v
  else f (hd xs) (foldr f v (tl xs))
  
 let concat xs ys = foldr cons ys xs
 
 let join = foldl concat empty
 
 let map f = foldr (\x xs -> cons (f x) xs) empty
 
 let bind f xs = join (map f xs)

 let sum xs = foldl (\x y -> x + y) 0 xs
 
 let product xs = foldl (\x y -> x * y) 1 xs
 
 let filter p = foldr (\x xs -> if (p x) then cons x xs else xs) empty 
 