data NatF a = Zero | Succ a deriving Functor

val add :: Fix NatF -> Fix NatF -> Fix NatF
let add x y = 
  match (out x) with
  | Zero -> y
  | Succ x' -> In (Succ (add x' y))

val mul :: Fix NatF -> Fix NatF -> Fix NatF
let mul x y = match (out y) with  
  | Zero -> In Zero
  | Succ (In Zero) -> x 
  | Succ y -> add x (mul x y)

let fac = 
 let alg v = 
  match v with
  | Zero -> In (Succ (In Zero))
  | Succ (n, fn) -> mul (In (Succ n)) fn in
 paraRec alg 
 
val fromInt :: (Eq a, Num a) => a -> Fix NatF
let fromInt x =
  if (x == 0) then In (Zero)
  else In (Succ (fromInt (x - 1)))
  
val toInt :: Num a => Fix NatF -> a
let toInt x =  
  match (out x) with
  | Zero -> 0
  | Succ x -> toInt x + 1
 
let main = (toInt . fac . fromInt) 5
  