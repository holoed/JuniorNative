let zero = mkParser (\inp -> [])

let item = mkParser (\inp -> if (null inp) then []
                             else (head inp, tail inp) : [])
                             
let sat p = bind item (\x ->
              if p x then pure x else zero)
              
let char x = sat (\y -> x == y)
              
let digit = sat (\x -> '0' <= x && x <= '9')
   
let or p q = mkParser(\inp -> let ret = runParser p inp in
                              if null ret then runParser q inp
                              else ret)
 
let many p = or (bind p (\x ->
             bind (many p) (\xs ->
             pure (x:xs)))) (pure [])
 
let many1 p = bind p (\x ->
              bind (many p) (\xs ->
              pure (x:xs)))  
                
let bracket open p close = bind open (\v1 ->
                           bind p    (\x  ->
                           bind close(\v2 ->
                           pure x)))
  
let foldl1 f xs = foldl f (head xs) (tail xs)

let foldright f v xs =
  if (null xs) then v
  else f (head xs) (foldright f v (tail xs))
  
let foldright1 f xs = foldright f (head xs) (tail xs)

let eval xs = 
  let op m n = 10*m + n in 
  foldl1 op (bind xs (\x -> pure (ord x - ord '0'))) 

let nat = bind (many1 digit) (pure . eval)

let int = 
    let negate x = 0 - x in
	let op = or (bind (char '-') (\v -> pure negate)) 
                (pure (\x -> x)) in
    bind op (\f -> 
    bind nat (\n -> pure (f n)))

let lazy p = mkParser(\inp -> runParser (p ()) inp)

let rest p op x = or (bind op (\f ->
                      bind p  (\y ->
                      rest p op (f x y)))) (pure x)

let chainl1 p op = bind p (rest p op)

let chainr1 p op =
   bind p (\x -> or (bind op (\f ->
                     bind (chainr1 p op) (\y ->
                     pure (f x y)))) (pure x))

let foo p op = lazy (\v -> bind p (\v -> pure op))

let ops xs = foldright1 or (bind xs (\(p, op) -> (foo p op):[]))

let addop v = ops ((char '+', (+)) : (char '-', (-)):[])

let mulop v = ops ((char '*', (*)) : (char '/', (/)):[])

let expr = 
  let factor = or nat (lazy (\v -> (bracket (char '(') expr (char ')')))) in
  let term = chainl1 factor (mulop ()) in
  chainl1 term (addop ()) 

let main = runParser expr (toCharList "(3+2)*(5-3)/2")  
                                        
   