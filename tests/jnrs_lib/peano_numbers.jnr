data Nat = Z | S Nat

val add :: Nat -> Nat -> Nat
let add x y = 
  match x with
  | Z -> y
  | S x' -> S (add x' y)

let mul x y = match y with
  | Z -> Z
  | S y -> match y with
           | Z -> x
           | S z -> add x (mul x y)
 
val toInt :: Num a => Nat -> a
let toInt x = 
  match x with
  | Z -> 0
  | S x -> toInt x + 1

val fromInt :: Num a => a -> Nat
let fromInt x =
  if (x == 0) then Z
  else S (fromInt (x - 1))

let main = toInt (mul (add (fromInt 2) (fromInt 3)) (fromInt 6))

