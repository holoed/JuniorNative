let zero = mkParser (\inp -> [])

let item = mkParser (\inp -> if (null inp) then []
                             else (head inp, tail inp) : [])
                             
let sat p = (>>=) item (\x ->
              if p x then pure x else zero)
              
let char x = sat (\y -> x == y)
              
let digit = sat (\x -> '0' <= x && x <= '9')
   
let or p q = mkParser(\inp -> let ret = runParser p inp in
                              if null ret then runParser q inp
                              else ret)
 
let many p = or ((>>=) p (\x ->
             (>>=) (many p) (\xs ->
             pure (x:xs)))) (pure [])
 
let many1 p = (>>=) p (\x ->
              (>>=) (many p) (\xs ->
              pure (x:xs)))
  
let sepby1 p sep = 
      (>>=) p (\x ->
      (>>=) (many ((>>=) sep (\v ->
                  (>>=) p (\y ->
                  pure y)))) (\xs -> pure (x:xs)))
                  
let bracket open p close = (>>=) open (\v1 ->
                           (>>=) p    (\x  ->
                           (>>=) close(\v2 ->
                           pure x)))
  
let foldl1 f xs = foldl f (head xs) (tail xs)

let eval xs = 
  let op m n = 10*m + n in 
  foldl1 op ((>>=) xs (\x -> pure (ord x - ord '0'))) 

let nat = (>>=) (many1 digit) (pure . eval)

let negate x = 0 - x

let int = 
	let op = or ((>>=) (char '-') (\v -> pure negate)) 
                (pure (\x -> x)) in
    (>>=) op (\f -> 
    (>>=) nat (\n -> pure (f n)))

let ints = bracket (char '[')
                   (sepby1 int (char ','))
                   (char ']')

let main = runParser ints (toCharList "[1,2,-5,-3,7]")     
  
                                       
  